{"version":3,"sources":["../src/config.js","../src/createGameArray.js","../src/createGameTiles.js","../src/game.js","../src/restart.js","../src/index.js"],"names":["config","bombs","width","height","createGameArray","size","determineSurroundingIds","index","ids","isLeftEdge","isRightEdge","isTopEdge","isBottomEdge","push","shuffle","a","i","length","j","Math","floor","random","calculateHints","gameArray","mappedArray","map","tile","array","reduce","acc","currIndex","Array","gameArrayWithHints","fill","createGameTiles","clickTile","toggleFlag","grid","document","querySelector","gameTiles","style","div","createElement","el","appendChild","classList","add","tileSize","dataset","id","addEventListener","Game","forEach","removeEventListener","isBomb","innerText","fontSize","message","win","flagged","hint","clicked","gameOver","clickUncoveredTile","newEl","setTimeout","revealTile","e","target","preventDefault","removeAttribute","bombsLeft","bombsCounter","checkWin","handleRestart","removeGameTiles","innerHTML","restartGame","start"],"mappings":"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","file":"src.9fb191db.js","sourceRoot":"../public","sourcesContent":["const config = {\n  bombs: 120, // # of bombs\n  width: 40, // # of tiles horizontally\n  height: 20, // # of tiles vertically\n};\n\nexport default config;\n","import config from './config';\n\nconst { bombs, width, height } = config;\nconst size = width * height;\n\nexport const determineSurroundingIds = (index) => {\n  const ids = [];\n  const isLeftEdge = index % width === 0;\n  const isRightEdge = (index + 1) % width === 0;\n  const isTopEdge = index < width;\n  const isBottomEdge = index >= (size - width);\n\n  if (!isLeftEdge) ids.push(index - 1); // check West\n  if (!isRightEdge) ids.push(index + 1); // check East\n  if (!isTopEdge) ids.push(index - width); // check North\n  if (!isBottomEdge) ids.push(index + width); // check South\n  if (!isLeftEdge && !isTopEdge) ids.push(index - width - 1); // check NW\n  if (!isRightEdge && !isTopEdge) ids.push(index - width + 1); // check NE\n  if (!isLeftEdge && !isBottomEdge) ids.push(index + width - 1); // check SW\n  if (!isRightEdge && !isBottomEdge) ids.push(index + width + 1); // check SE\n\n  return ids;\n};\n\nconst shuffle = (a) => {\n  // eslint-disable-next-line no-plusplus\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // eslint-disable-next-line no-param-reassign\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n\nconst calculateHints = (gameArray) => {\n  const mappedArray = gameArray.map((tile, index, array) => {\n    if (tile === -1) {\n      return -1;\n    }\n\n    const ids = determineSurroundingIds(index);\n    const counter = ids.reduce((acc, currIndex) => {\n      const newValue = array[currIndex] === -1 ? 1 : 0;\n      return acc + newValue;\n    }, 0);\n\n    return counter;\n  });\n\n  return mappedArray;\n};\n\nconst createGameArray = () => {\n  const gameArray = new Array(size);\n  gameArray.fill(-1, 0, bombs); // -1 represents bomb\n  gameArray.fill(0, bombs, size); // 0 represents clean area\n  shuffle(gameArray); // randomly set bombs\n  const gameArrayWithHints = calculateHints(gameArray);\n\n  return gameArrayWithHints;\n};\n\nexport default createGameArray;\n","import config from './config';\n\nconst createGameTiles = (gameArray, clickTile, toggleFlag) => {\n  const { width, height } = config;\n  const tileSize = 20;\n\n  const grid = document.querySelector('.grid');\n  grid.style.width = `${width * tileSize}px`;\n  grid.style.height = `${height * tileSize}px`;\n\n  const gameTiles = gameArray.map((tile, index) => {\n    const div = document.createElement('div');\n    const el = grid.appendChild(div);\n    el.classList.add('tile');\n    el.style.width = `${tileSize}px`;\n    el.style.height = `${tileSize}px`;\n    el.dataset.id = index;\n\n    el.addEventListener('click', clickTile);\n    el.addEventListener('contextmenu', toggleFlag);\n\n    return el;\n  });\n\n  return gameTiles;\n};\n\nexport default createGameTiles;\n","import createGameArray, { determineSurroundingIds } from './createGameArray';\nimport createGameTiles from './createGameTiles';\n\nclass Game {\n  constructor({ bombs }) {\n    this.bombs = bombs;\n    this.bombsLeft = bombs;\n    this.gameArray = [];\n    this.gameTiles = [];\n    this.message = document.querySelector('.message');\n    this.bombsCounter = document.querySelector('.bombs-counter');\n    this.bombsCounter.innerText = this.bombsLeft;\n  }\n\n  isBomb = (tile) => {\n    const { id } = tile.dataset;\n    return this.gameArray[id] === -1;\n  };\n\n  gameOver = () => {\n    this.gameTiles.forEach((tile) => {\n      tile.removeEventListener('click', this.clickTile);\n      tile.removeEventListener('contextmenu', this.toggleFlag);\n      if (this.isBomb(tile)) {\n        tile.innerText = '💣';\n        tile.style.fontSize = '12px';\n      }\n    });\n    this.message.innerText = 'Game Over!';\n  }\n\n  checkWin = () => {\n    let win = true;\n    this.gameTiles.forEach((tile) => {\n      if (this.isBomb(tile) && !tile.dataset.flagged) {\n        win = false;\n      }\n      if (!this.isBomb(tile) && tile.dataset.flagged) {\n        win = false;\n      }\n    });\n    if (win) {\n      this.message.innerText = 'You Won!';\n    }\n  }\n\n  revealTile = (tile) => {\n    const id = +tile.dataset.id;\n    const hint = this.gameArray[id];\n    if (tile.dataset.clicked) {\n      return;\n    }\n    if (tile.dataset.flagged && this.isBomb(tile)) {\n      return;\n    }\n    if (this.isBomb(tile) || (tile.dataset.flagged && !this.isBomb(tile))) {\n      this.gameOver();\n      return;\n    }\n\n    tile.classList.add('tile-uncovered');\n    tile.removeEventListener('click', this.clickTile);\n    tile.dataset.clicked = true;\n\n    if (hint > 0) {\n      tile.innerText = hint;\n      tile.classList.add(`tile-hint-${hint}`);\n      tile.addEventListener('click', this.clickUncoveredTile);\n    }\n\n    if (hint === 0) {\n      // reveal all gameArray around this one\n      const ids = determineSurroundingIds(id);\n      ids.forEach((i) => {\n        const newEl = document.querySelector(`[data-id=\"${i}\"]`);\n        setTimeout(() => {\n          this.revealTile(newEl);\n        }, 20);\n      });\n    }\n  }\n\n  clickTile = (e) => {\n    const tile = e.target;\n\n    if (this.isBomb(tile)) {\n      this.gameOver();\n    } else {\n      this.revealTile(tile);\n    }\n  }\n\n  clickUncoveredTile = (e) => {\n    const tile = e.target;\n    const id = +tile.dataset.id;\n\n    // reveal all gameArray around this one\n    const ids = determineSurroundingIds(id);\n    ids.forEach((i) => {\n      const newEl = document.querySelector(`[data-id=\"${i}\"]`);\n      setTimeout(() => {\n        this.revealTile(newEl);\n      }, 20);\n    });\n    tile.removeEventListener('click', this.clickUncoveredTile);\n  }\n\n  toggleFlag = (e) => {\n    e.preventDefault();\n    const tile = e.target;\n\n    if (tile.dataset.clicked) {\n      return;\n    }\n\n    if (tile.dataset.flagged) {\n      // remove flag\n      tile.innerText = '';\n      tile.style.fontSize = '16px';\n      tile.removeAttribute('data-flagged');\n      tile.addEventListener('click', this.clickTile);\n      this.bombsLeft += 1;\n    } else {\n      // set flag\n      tile.innerText = '🚩';\n      tile.style.fontSize = '12px';\n      tile.dataset.flagged = true;\n      tile.removeEventListener('click', this.clickTile);\n      this.bombsLeft -= 1;\n    }\n    this.bombsCounter.innerText = this.bombsLeft;\n\n    if (this.bombsLeft === 0) {\n      this.checkWin();\n    }\n  }\n\n  start() {\n    this.gameArray = createGameArray();\n    this.gameTiles = createGameTiles(this.gameArray, this.clickTile, this.toggleFlag);\n  }\n}\n\nexport default Game;\n","import config from './config';\nimport Game from './game';\n\nconst removeGameTiles = () => {\n  const grid = document.querySelector('.grid');\n  grid.innerHTML = '';\n};\n\nconst restartGame = () => {\n  document.querySelector('.message').innerText = 'Minesweeper';\n  removeGameTiles();\n  const game = new Game(config);\n  game.start();\n};\n\nconst handleRestart = () => {\n  const restartBtn = document.querySelector('.restart');\n  restartBtn.addEventListener('click', restartGame);\n};\n\nexport default handleRestart;\n","import config from './config';\nimport Game from './game';\nimport handleRestart from './restart';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  handleRestart();\n  const game = new Game(config);\n  game.start();\n});\n"]}